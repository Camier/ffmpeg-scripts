#!/usr/bin/env python3
"""
Enhanced ASCII Art generator for ASCII Symphony Pro
This provides a high-quality ASCII art visualization of audio
using complex direct ASCII patterns and fractal-like visualizations
with enhanced character density gradients.
"""

class AsciiGenerator:
    """Generate sophisticated ASCII art visualizations for audio."""

    def __init__(self):
        """Initialize the ASCII generator with complex patterns."""
        # Preloaded complex ASCII art patterns
        self.patterns = {
            'waves': """
           ▁▁▂▃▃▄▄▅▅▆▇██▇▆▆▅▅▄▄▃▃▂▁▁
          ▁▁▂▂▃▃▄▄▅▅▆▆▇▇██▇▇▆▆▅▅▄▄▃▃▂▂▁▁
         ▁▁▂▂▃▃▄▄▅▅▆▆▇▇████▇▇▆▆▅▅▄▄▃▃▂▂▁▁
        ▁▁▂▂▃▃▄▄▅▅▆▆▇▇██████▇▇▆▆▅▅▄▄▃▃▂▂▁▁
       ▁▁▂▂▃▃▄▄▅▅▆▆▇▇████████▇▇▆▆▅▅▄▄▃▃▂▂▁▁
      ▁▁▂▂▃▃▄▄▅▅▆▆▇▇██████████▇▇▆▆▅▅▄▄▃▃▂▂▁▁
     ▁▁▂▂▃▃▄▄▅▅▆▆▇▇████████████▇▇▆▆▅▅▄▄▃▃▂▂▁▁
    ▁▁▂▂▃▃▄▄▅▅▆▆▇▇██████████████▇▇▆▆▅▅▄▄▃▃▂▂▁▁
   ▁▁▂▂▃▃▄▄▅▅▆▆▇▇████████████████▇▇▆▆▅▅▄▄▃▃▂▂▁▁
  ▁▁▂▂▃▃▄▄▅▅▆▆▇▇██████████████████▇▇▆▆▅▅▄▄▃▃▂▂▁▁
  ▁▂▃▄▅▆▇█████████████████████████████████████▇▆▅▄▃▂▁
   ▁▂▃▄▅▆▇█████████████████████████████████████▇▆▅▄▃▂▁
    ▁▂▃▄▅▆▇█████████████████████████████████████▇▆▅▄▃▂▁
     ▁▂▃▄▅▆▇█████████████████████████████████████▇▆▅▄▃▂▁                """,

            'spectrum': """
██████████████████████████████████████████████████████████████████████████
█▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓█
█▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓█
█▓▒░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░▒▓█
█▓▒░   ▄▄▄     ▄▄▄     ▄▄▄     ▄▄▄     ▄▄▄     ▄▄▄     ▄▄▄     ▄▄▄  ░▒▓█
█▓▒░  █   █   █   █   █   █   █   █   █   █   █   █   █   █   █   █ ░▒▓█
█▓▒░  █   █   █   █   █   █   █   █   █   █   █   █   █   █   █   █ ░▒▓█
█▓▒░  █   █   █   █   █   █   █   █   █   █   █   █   █   █   █   █ ░▒▓█
█▓▒░  █   █   █   █   █   █   █   █   █   █   █   █   █   █   █   █ ░▒▓█
█▓▒░  █   █   █   █   █   █   █   █   █   █   █   █   █   █   █   █ ░▒▓█
█▓▒░  █   █   █   █   █   █   █   █   █   █   █   █   █   █   █   █ ░▒▓█
█▓▒░  █   █   █   █   █   █   █   █   █   █   █   █   █   █   █   █ ░▒▓█
█▓▒░  █   █   █   █   █   █   █   █   █   █   █   █   █   █   █   █ ░▒▓█
█▓▒░  █   █   █   █   █   █   █   █   █   █   █   █   █   █   █   █ ░▒▓█
█▓▒░  █████   █████   █████   █████   █████   █████   █████   █████ ░▒▓█
""",

            'cqt': """
█▓▒░ ▒▓█▒▓█▒▓█▒▓█▒▓█▒▓█▒▓█▒▓█▒▓█▒▓█▒▓█▒▓█▒▓█▒▓█▒▓█▒▓█▒▓█▒▓█▒▓█▒▓█▒▓█ ░▒▓█
█▓▒░ █▓▒   ▓██   ▓██   ▓██   ▓██   ▓██   ▓██   ▓██   ▓██   ▓██   ▓██ ░▒▓█
█▓▒░  ▒▓   ▒▓█   ▒▓█   ▒▓█   ▒▓█   ▒▓█   ▒▓█   ▒▓█   ▒▓█   ▒▓█   ▒▓█ ░▒▓█
█▓▒░   █   ▒▓    ▒▓    ▒▓    ▒▓    ▒▓    ▒▓    ▒▓    ▒▓    ▒▓    ▒▓  ░▒▓█
█▓▒░   ▓    █     █     █     █     █     █     █     █     █     █  ░▒▓█
█▓▒░   ▒    ▓     ▓     ▓     ▓     ▓     ▓     ▓     ▓     ▓     ▓  ░▒▓█
█▓▒░   ░    ▒     ▒     ▒     ▒     ▒     ▒     ▒     ▒     ▒     ▒  ░▒▓█
█▓▒░        ░     ░     ░     ░     ░     ░     ░     ░     ░     ░  ░▒▓█
█▓▒░                                                                 ░▒▓█
█▓▒░                                                                 ░▒▓█
█▓▒░                                                                 ░▒▓█
█▓▒░              ▄▄▄▄▄▄▄       ▄▄▄▄▄▄▄       ▄▄▄▄▄▄▄                ░▒▓█
█▓▒░             █████████     █████████     █████████               ░▒▓█
█▓▒░             █████████     █████████     █████████               ░▒▓█
""",

            'neural': """
▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒░░░░░░░░░░░░░░░░░
▓   ▓   ▓   ▓   ▓  ▒  ▒  ▒  ▒  ▒  ▒  ░  ░  ░  ░  ░  ░
▓ ▓ ▓ ▓ ▓ ▓ ▓ ▓ ▓ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ░ ░ ░ ░ ░ ░ ░ ░ ░
▓▓   ▓▓   ▓▓   ▓▓ ▒▒   ▒▒   ▒▒   ▒▒ ░░   ░░   ░░   ░░
▓ ▓ ▓ ▓ ▓ ▓ ▓ ▓ ▓ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ▒ ░ ░ ░ ░ ░ ░ ░ ░ ░
▓   ▓   ▓   ▓   ▓  ▒  ▒  ▒  ▒  ▒  ▒  ░  ░  ░  ░  ░  ░

█▓▒░                             ▒▓█
█▓▒░ ▄▄▄▄▄▄▄▄  ▄▄▄▄▄▄▄▄  ▄▄▄▄▄▄▄ ▒▓█
█▓▒░ █      █  █      █  █      █ ▒▓█
█▓▒░ █  ██  █  █  ██  █  █  ██  █ ▒▓█
█▓▒░ █      █  █      █  █      █ ▒▓█
█▓▒░ ▀▀▀▀▀▀▀▀  ▀▀▀▀▀▀▀▀  ▀▀▀▀▀▀▀▀ ▒▓█
█▓▒░                             ▒▓█

██▓▓▒▒░░  ██▓▓▒▒░░  ██▓▓▒▒░░  ██▓▓▒▒░░  ██▓▓▒▒░░  ██▓▓▒▒░░
██▓▓▒▒░░  ██▓▓▒▒░░  ██▓▓▒▒░░  ██▓▓▒▒░░  ██▓▓▒▒░░  ██▓▓▒▒░░
██▓▓▒▒░░  ██▓▓▒▒░░  ██▓▓▒▒░░  ██▓▓▒▒░░  ██▓▓▒▒░░  ██▓▓▒▒░░
██▓▓▒▒░░  ██▓▓▒▒░░  ██▓▓▒▒░░  ██▓▓▒▒░░  ██▓▓▒▒░░  ██▓▓▒▒░░
""",

            'fractal': """
█████████████████████████████████████████████████████████████████████████
█░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░█
█░░░░░▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓░░░░░░▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓░░░░█
█░░░░░▓░░░░░░░░░░░░░░░░░░░░░░░░░░░░░▓░░░░░░▓░░░░░░░░░░░░░░░░░░░░░░░▓░░░░█
█░░░░░▓░░░░░██████████████████████░░▓░░░░░░▓░░██████████████████░░░▓░░░░█
█░░░░░▓░░░░░█▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒█░░▓░░░░░░▓░░█▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒█░░▓░░░░█
█░░░░░▓░░░░░█▒▒████████████████▒▒█░░▓░░░░░░▓░░█▒▒████████████▒▒█░░▓░░░░█
█░░░░░▓░░░░░█▒▒█▓▓▓▓▓▓▓▓▓▓▓▓▓▓█▒▒█░░▓░░░░░░▓░░█▒▒█▓▓▓▓▓▓▓▓▓▓█▒▒█░░▓░░░░█
█░░░░░▓░░░░░█▒▒█▓▒▒▒▒▒▒▒▒▒▒▒▓█▒▒█░░▓░░░░░░▓░░█▒▒█▓▒▒▒▒▒▒▒▒▓█▒▒█░░▓░░░░█
█░░░░░▓░░░░░█▒▒█▓▒░░░░░░░░░▒▓█▒▒█░░▓░░░░░░▓░░█▒▒█▓▒░░░░░░▒▓█▒▒█░░▓░░░░█
█░░░░░▓░░░░░█▒▒█▓▒░▄▄▄▄▄▄▄░▒▓█▒▒█░░▓░░░░░░▓░░█▒▒█▓▒░▄▄▄▄░▒▓█▒▒█░░▓░░░░█
█░░░░░▓░░░░░█▒▒█▓▒░█████▓█░▒▓█▒▒█░░▓░░░░░░▓░░█▒▒█▓▒░███░▒▓█▒▒█░░▓░░░░█
█░░░░░▓░░░░░█▒▒█▓▒░█▒▒▒█▓█░▒▓█▒▒█░░▓░░░░░░▓░░█▒▒█▓▒░▀▀▀░▒▓█▒▒█░░▓░░░░█
█░░░░░▓░░░░░█▒▒█▓▒░█▒░▒█▓█░▒▓█▒▒█░░▓░░░░░░▓░░█▒▒█▓▒░░░░▒▓█▒▒█░░▓░░░░█
█░░░░░▓░░░░░█▒▒█▓▒░▀▀▀▀▀▀▀░▒▓█▒▒█░░▓░░░░░░▓░░█▒▒█▓▒▒▒▒▒▒▓█▒▒█░░▓░░░░█
█░░░░░▓░░░░░█▒▒█▓▒▒▒▒▒▒▒▒▒▒▒▓█▒▒█░░▓░░░░░░▓░░█▒▒█▓▓▓▓▓▓▓█▒▒█░░▓░░░░█
█░░░░░▓░░░░░█▒▒█▓▓▓▓▓▓▓▓▓▓▓▓▓█▒▒█░░▓░░░░░░▓░░█▒▒████████▒▒█░░▓░░░░█
█░░░░░▓░░░░░█▒▒████████████████▒▒█░░▓░░░░░░▓░░█▒▒▒▒▒▒▒▒▒▒▒▒█░░▓░░░░█
█░░░░░▓░░░░░█▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒█░░▓░░░░░░▓░░███████████████░▓░░░░█
█░░░░░▓░░░░░██████████████████████░░▓░░░░░░▓░░░░░░░░░░░░░░░░░░▓░░░░█
█░░░░░▓░░░░░░░░░░░░░░░░░░░░░░░░░░░░░▓░░░░░░▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓░░░░█
█░░░░░▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░█
█░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░█
█████████████████████████████████████████████████████████████████████████
""",

            'mandelbrot': """
██████████████████████████████████████████████████████████████████████████████
██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░██
██░░░░░░░░░░░░░░░░░░░░░░░░░   ..::░░::..   ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░██
██░░░░░░░░░░░░░░░░░░░░ ..::▒▒▓▓██████▓▓▒▒::.. ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░██
██░░░░░░░░░░░░░░░░░ .:▒▒▓▓████████████████▓▓▒▒:. ░░░░░░░░░░░░░░░░░░░░░░░░░░░░██
██░░░░░░░░░░░░░░ .:▒▓████████████████████████▓▒:. ░░░░░░░░░░░░░░░░░░░░░░░░░░░██
██░░░░░░░░░░░░ .░▒▓████████████████████████████▓▒░. ░░░░░░░░░░░░░░░░░░░░░░░░░██
██░░░░░░░░░░░ :▒▓██████████████████████████████████▓▒: ░░░░░░░░░░░░░░░░░░░░░░██
██░░░░░░░░░░ :▓██████████████████████████████████████▓: ░░░░░░░░░░░░░░░░░░░░░██
██░░░░░░░░░ ▒▓██████████████████████████████████████████▓▒ ░░░░░░░░░░░░░░░░░░░██
██░░░░░░░░ :▓███████▓▓▓▓▓██████████████████▓▓▓▓▓▓█████████▓: ░░░░░░░░░░░░░░░░░██
██░░░░░░░ :▓█████▓▒░::.     .:░▒▓████▓▒░:.     .::░▒▓███████▓: ░░░░░░░░░░░░░░░██
██░░░░░░░ ▒█████▓░:              .:░:.              :░▓█████▒ ░░░░░░░░░░░░░░░░██
██░░░░░░ :▓█████▒.                                    .▒█████▓: ░░░░░░░░░░░░░░░██
██░░░░░░ ▒██████░  .::░░▒▒▒░░:.        .:░░▒▒▒░░:.    ░██████▒ ░░░░░░░░░░░░░░░██
██░░░░░ :▓██████▒ ▒▓███████████▓▒░  ░▒▓███████████▓▒  ▒██████▓: ░░░░░░░░░░░░░░██
██░░░░░ ▒███████▓ ░████████████████████████████████░ ▓███████▒ ░░░░░░░░░░░░░░░██
██░░░░░░▓████████▒ :▓████████████████████████████▓: ▒████████▓░░░░░░░░░░░░░░░░██
██░░░░░ ▓█████████▓░ .░▒▓██████████████████████▓▒░. ░▓█████████▓ ░░░░░░░░░░░░░██
██░░░░ :█████████████▒:.  .:░▒▓▓██████████▓▓▒░:.  .:▒█████████████: ░░░░░░░░░░██
██░░░░ ▒███████████████▓▒░:.     .::::::.     .:░▒▓███████████████▒ ░░░░░░░░░░██
██░░░░ ▓███████████████████▓▒░:.        .:░▒▓███████████████████████▓ ░░░░░░░░░██
██░░░░░▓███████████████████████▓▒░:..:░▒▓█████████████████████████▓░░░░░░░░░░░██
██░░░░ ▒████████████████████████████████████████████████████████▒ ░░░░░░░░░░░░██
██░░░░░ :▓████████████████████████████████████████████████████▓: ░░░░░░░░░░░░░██
██░░░░░░ :▒████████████████████████████████████████████████▒: ░░░░░░░░░░░░░░░░██
██░░░░░░░ .:▒▓█████████████████████████████████████████▓▒:. ░░░░░░░░░░░░░░░░░░██
██░░░░░░░░░ .:░▒▓████████████████████████████████▓▒░:. ░░░░░░░░░░░░░░░░░░░░░░░██
██░░░░░░░░░░░   .::░▒▒▓▓▓██████████████▓▓▓▒▒░::.   ░░░░░░░░░░░░░░░░░░░░░░░░░░░██
██░░░░░░░░░░░░░░     ..::░░░░░░░░░░░░░░░░::..     ░░░░░░░░░░░░░░░░░░░░░░░░░░░░██
██░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░██
██████████████████████████████████████████████████████████████████████████████
""",

            'cellular': """
██████████████████████████████████████████████████████████████████████████
██▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓██
██▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓██
██▓▒░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░▒▓██
██▓▒░ ▒█▓░ ░▓█▒ ▒█▓░ ░▓█▒ ▒█▓░ ░▓█▒ ▒█▓░ ░▓█▒ ▒█▓░ ░▓█▒ ▒█▓░ ░▓█▒ ▒█▓ ░▒▓██
██▓▒░ ▒█▓░ ░▓█▒ ▒█▓░ ░▓█▒ ▒█▓░ ░▓█▒ ▒█▓░ ░▓█▒ ▒█▓░ ░▓█▒ ▒█▓░ ░▓█▒ ▒█▓ ░▒▓██
██▓▒░ ▒█▓░ ░▓█▒ ▒█▓░ ░▓█▒ ▒█▓░ ░▓█▒ ▒█▓░ ░▓█▒ ▒█▓░ ░▓█▒ ▒█▓░ ░▓█▒ ▒█▓ ░▒▓██
██▓▒░ ▒▓█▓█▓▒▒▓█▓▓▒▒▓█▓▓▒▒▓█▓▓▒▒▓█▓▓▒▒▓█▓▓▒▒▓█▓▓▒▒▓█▓▓▒▒▓█▓▓▒▒▓█▓█▓▒ ░▒▓██
██▓▒░ ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░ ░▒▓██
██▓▒░ ▒█▓░ ░▓█▒ ▒█▓░ ░▓█▒ ▒█▓░ ░▓█▒ ▒█▓░ ░▓█▒ ▒█▓░ ░▓█▒ ▒█▓░ ░▓█▒ ▒█▓ ░▒▓██
██▓▒░ ▒█▓░ ░▓█▒ ▒█▓░ ░▓█▒ ▒█▓░ ░▓█▒ ▒█▓░ ░▓█▒ ▒█▓░ ░▓█▒ ▒█▓░ ░▓█▒ ▒█▓ ░▒▓██
██▓▒░ ▒█▓░ ░▓█▒ ▒█▓░ ░▓█▒ ▒█▓░ ░▓█▒ ▒█▓░ ░▓█▒ ▒█▓░ ░▓█▒ ▒█▓░ ░▓█▒ ▒█▓ ░▒▓██
██▓▒░ ▒▓█▓█▓▒▒▓█▓▓▒▒▓█▓▓▒▒▓█▓▓▒▒▓█▓▓▒▒▓█▓▓▒▒▓█▓▓▒▒▓█▓▓▒▒▓█▓▓▒▒▓█▓█▓▒ ░▒▓██
██▓▒░ ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░ ░▒▓██
██▓▒░ ▒█▓░ ░▓█▒ ▒█▓░ ░▓█▒ ▒█▓░ ░▓█▒ ▒█▓░ ░▓█▒ ▒█▓░ ░▓█▒ ▒█▓░ ░▓█▒ ▒█▓ ░▒▓██
██▓▒░ ▒█▓░ ░▓█▒ ▒█▓░ ░▓█▒ ▒█▓░ ░▓█▒ ▒█▓░ ░▓█▒ ▒█▓░ ░▓█▒ ▒█▓░ ░▓█▒ ▒█▓ ░▒▓██
██▓▒░ ▒█▓░ ░▓█▒ ▒█▓░ ░▓█▒ ▒█▓░ ░▓█▒ ▒█▓░ ░▓█▒ ▒█▓░ ░▓█▒ ▒█▓░ ░▓█▒ ▒█▓ ░▒▓██
██▓▒░ ▒▓█▓█▓▒▒▓█▓▓▒▒▓█▓▓▒▒▓█▓▓▒▒▓█▓▓▒▒▓█▓▓▒▒▓█▓▓▒▒▓█▓▓▒▒▓█▓▓▒▒▓█▓█▓▒ ░▒▓██
██▓▒░ ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░ ░▒▓██
██▓▒░ ▒█▓░ ░▓█▒ ▒█▓░ ░▓█▒ ▒█▓░ ░▓█▒ ▒█▓░ ░▓█▒ ▒█▓░ ░▓█▒ ▒█▓░ ░▓█▒ ▒█▓ ░▒▓██
██▓▒░ ▒█▓░ ░▓█▒ ▒█▓░ ░▓█▒ ▒█▓░ ░▓█▒ ▒█▓░ ░▓█▒ ▒█▓░ ░▓█▒ ▒█▓░ ░▓█▒ ▒█▓ ░▒▓██
██▓▒░ ▒█▓░ ░▓█▒ ▒█▓░ ░▓█▒ ▒█▓░ ░▓█▒ ▒█▓░ ░▓█▒ ▒█▓░ ░▓█▒ ▒█▓░ ░▓█▒ ▒█▓ ░▒▓██
██▓▒░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░▒▓██
██▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓██
██▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓██
██████████████████████████████████████████████████████████████████████████
""",

            'quantum': """
▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
▓                                                            ▓
▓  ┌────┐┌──┐┌────┐┌────┐┌────┐┌────┐┌────┐┌────┐┌────┐┌───┐ ▓
▓  │    ││  ││    ││    ││    ││    ││    ││    ││    ││   │ ▓
▓  └────┘└──┘└────┘└────┘└────┘└────┘└────┘└────┘└────┘└───┘ ▓
▓                                                            ▓
▓  ┌────┐┌────┐┌────┐┌────┐┌────┐┌────┐┌────┐┌────┐┌────┐┌──┐ ▓
▓  │    ││    ││    ││    ││    ││    ││    ││    ││    ││  │ ▓
▓  └────┘└────┘└────┘└────┘└────┘└────┘└────┘└────┘└────┘└──┘ ▓
▓                                                            ▓
▓  ╔═══════╗╔═══════╗╔═══════╗╔═══════╗╔═══════╗╔═══════╗   ▓
▓  ║ ░░▓▓█ ║║ ▓▓█▓▓ ║║ █▒█░░ ║║ ░░▓▓█ ║║ ▓▓█▓▓ ║║ █▒█░░ ║   ▓
▓  ║ ▓█░░▒ ║║ ░░▒▓█ ║║ ▓▒█▓█ ║║ ▓█░░▒ ║║ ░░▒▓█ ║║ ▓▒█▓█ ║   ▓
▓  ║ ▒▓█▒▓ ║║ █▒▓░░ ║║ ░░▒▓▒ ║║ ▒▓█▒▓ ║║ █▒▓░░ ║║ ░░▒▓▒ ║   ▓
▓  ╚═══════╝╚═══════╝╚═══════╝╚═══════╝╚═══════╝╚═══════╝   ▓
▓                                                            ▓
▓  ┌──────────┐┌──────────┐┌──────────┐┌──────────┐          ▓
▓  │  ╭───╮   ││   ╭─╮    ││   ╭───╮  ││  ╭───╮   │          ▓
▓  │  │   │   ││   │ │    ││   │   │  ││  │   │   │          ▓
▓  │  ╰───╯   ││   ╰─╯    ││   ╰───╯  ││  ╰───╯   │          ▓
▓  └──────────┘└──────────┘└──────────┘└──────────┘          ▓
▓                                                            ▓
▓  ┌──┬──┬──┬──┐┌──┬──┬──┬──┐┌──┬──┬──┬──┐┌──┬──┬──┬──┐     ▓
▓  │░░│▒▒│▓▓│██││░░│▒▒│▓▓│██││░░│▒▒│▓▓│██││░░│▒▒│▓▓│██│     ▓
▓  ├──┼──┼──┼──┤├──┼──┼──┼──┤├──┼──┼──┼──┤├──┼──┼──┼──┤     ▓
▓  │██│▓▓│▒▒│░░││██│▓▓│▒▒│░░││██│▓▓│▒▒│░░││██│▓▓│▒▒│░░│     ▓
▓  └──┴──┴──┴──┘└──┴──┴──┴──┘└──┴──┴──┴──┘└──┴──┴──┴──┘     ▓
▓                                                            ▓
▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓

│⟩─────────┬───────────┬───────────┬───────────┬───────────│⟩
           │           │           │           │
│⟩─────────┼───────────┼───────────┼───────────┼───────────│⟩
           │           │           │           │
│⟩─────────┼───────────┼───────────┼───────────┼───────────│⟩
           │           │           │           │
│⟩─────────┴───────────┴───────────┴───────────┴───────────│⟩
"""
        }

        # Enhanced ANSI color codes with gradients and more options
        self.colors = {
            'green': '\033[32m',
            'amber': '\033[33m',
            'blue': '\033[34m',
            'red': '\033[31m',
            'magenta': '\033[35m',
            'cyan': '\033[36m',
            'white': '\033[37m',
            'bright_green': '\033[92m',
            'bright_amber': '\033[93m',
            'bright_blue': '\033[94m',
            'bright_red': '\033[91m',
            'bright_magenta': '\033[95m',
            'bright_cyan': '\033[96m',
            'bright_white': '\033[97m',
            'monochrome': '',
            'thermal': '\033[31m',
            'rainbow': ['\033[91m', '\033[93m', '\033[92m', '\033[96m', '\033[94m', '\033[95m']
        }
        
    def generate_art(self, mode='waves', color_scheme='green', complexity=1.0):
        """
        Generate enhanced ASCII art for the given mode and color scheme.

        Args:
            mode (str): The visualization mode/pattern to use
            color_scheme (str): The color scheme to apply
            complexity (float): A complexity factor (0.0-2.0) to adjust pattern density

        Returns:
            str: The formatted ASCII art pattern with applied colors
        """
        # Get the pattern for the selected mode (or default to waves)
        pattern = self.patterns.get(mode, self.patterns['waves'])

        # Apply rainbow effect if rainbow color scheme is selected
        if color_scheme == 'rainbow':
            reset = '\033[0m'
            rainbow_pattern = ""
            lines = pattern.strip().split('\n')
            for i, line in enumerate(lines):
                color_idx = i % len(self.colors['rainbow'])
                rainbow_pattern += f"{self.colors['rainbow'][color_idx]}{line}{reset}\n"
            return rainbow_pattern

        # Apply fractal recursion for increased complexity if requested
        if complexity > 1.0 and mode in ['fractal', 'mandelbrot', 'cellular']:
            # Create a more intricate pattern based on complexity
            lines = pattern.strip().split('\n')
            enhanced_pattern = []

            for line in lines:
                # Duplicate certain features based on complexity
                if '░' in line or '▒' in line or '▓' in line:
                    enhanced_line = ''
                    for char in line:
                        if char in ['░', '▒', '▓', '█', '▄', '▀', '▌', '▐']:
                            # Add intricate details based on complexity
                            enhanced_char = char
                            if complexity > 1.5:
                                if char == '░': enhanced_char = '▒'
                                elif char == '▒': enhanced_char = '▓'
                        else:
                            enhanced_char = char
                        enhanced_line += enhanced_char
                    enhanced_pattern.append(enhanced_line)
                else:
                    enhanced_pattern.append(line)

            pattern = '\n'.join(enhanced_pattern)

        # Apply the color if specified
        color_code = self.colors.get(color_scheme, '')
        if color_code:
            reset = '\033[0m'
            return f"{color_code}{pattern}{reset}"
        else:
            return pattern

    def apply_gradient(self, pattern, start_color, end_color):
        """Apply a color gradient to a pattern."""
        reset = '\033[0m'
        lines = pattern.strip().split('\n')
        gradient_pattern = ""

        # Extract RGB values from ANSI color codes
        start_r, start_g, start_b = 255, 0, 0  # Default red
        end_r, end_g, end_b = 0, 255, 0        # Default green

        if start_color == 'red': start_r, start_g, start_b = 255, 0, 0
        elif start_color == 'green': start_r, start_g, start_b = 0, 255, 0
        elif start_color == 'blue': start_r, start_g, start_b = 0, 0, 255
        elif start_color == 'amber': start_r, start_g, start_b = 255, 191, 0
        elif start_color == 'magenta': start_r, start_g, start_b = 255, 0, 255
        elif start_color == 'cyan': start_r, start_g, start_b = 0, 255, 255

        if end_color == 'red': end_r, end_g, end_b = 255, 0, 0
        elif end_color == 'green': end_r, end_g, end_b = 0, 255, 0
        elif end_color == 'blue': end_r, end_g, end_b = 0, 0, 255
        elif end_color == 'amber': end_r, end_g, end_b = 255, 191, 0
        elif end_color == 'magenta': end_r, end_g, end_b = 255, 0, 255
        elif end_color == 'cyan': end_r, end_g, end_b = 0, 255, 255

        total_lines = len(lines)
        for i, line in enumerate(lines):
            # Calculate color for this line in the gradient
            r = int(start_r + (end_r - start_r) * (i / total_lines))
            g = int(start_g + (end_g - start_g) * (i / total_lines))
            b = int(start_b + (end_b - start_b) * (i / total_lines))

            # Convert RGB to ANSI escape code (approximation)
            color_code = f"\033[38;2;{r};{g};{b}m"
            gradient_pattern += f"{color_code}{line}{reset}\n"

        return gradient_pattern

    def generate_pattern_mix(self, mode1, mode2, ratio=0.5):
        """Create a hybrid visualization by mixing two patterns."""
        pattern1 = self.patterns.get(mode1, self.patterns['waves'])
        pattern2 = self.patterns.get(mode2, self.patterns['spectrum'])

        lines1 = pattern1.strip().split('\n')
        lines2 = pattern2.strip().split('\n')

        # Calculate how many lines to take from each pattern
        max_lines = max(len(lines1), len(lines2))
        lines_from_1 = int(max_lines * ratio)

        # Create mixed pattern
        mixed_lines = []
        for i in range(max_lines):
            if i < lines_from_1 and i < len(lines1):
                mixed_lines.append(lines1[i])
            elif i < len(lines2):
                mixed_lines.append(lines2[i])

        return '\n'.join(mixed_lines)

    def visualize(self, input_file, mode='waves', color_scheme='green', complexity=1.0):
        """Create an enhanced visualization for the given audio file."""
        # This is an enhanced placeholder for actual audio visualization
        art = ""

        # Check if the mode is a mix pattern (format: "mode1+mode2")
        if '+' in mode:
            modes = mode.split('+')
            if len(modes) == 2:
                mixed_pattern = self.generate_pattern_mix(modes[0], modes[1])

                # Apply the color if specified
                color_code = self.colors.get(color_scheme, '')
                if color_code:
                    reset = '\033[0m'
                    art = f"{color_code}{mixed_pattern}{reset}"
                else:
                    art = mixed_pattern
            else:
                # Default to single mode if format is incorrect
                art = self.generate_art(mode, color_scheme, complexity)
        elif '-gradient' in color_scheme:
            # Handle gradient coloring (format: "color1-gradient-color2")
            colors = color_scheme.split('-gradient-')
            if len(colors) == 2:
                pattern = self.patterns.get(mode, self.patterns['waves'])
                art = self.apply_gradient(pattern, colors[0], colors[1])
            else:
                # Default to single color if format is incorrect
                art = self.generate_art(mode, 'green', complexity)
        else:
            # Standard single mode and color
            art = self.generate_art(mode, color_scheme, complexity)

        return f"Enhanced ASCII Art Visualization ({mode} mode with {color_scheme} color, complexity={complexity}):\n\n{art}"

if __name__ == "__main__":
    # Enhanced test with new patterns and features
    generator = AsciiGenerator()

    # Test different visualization modes
    for mode in ['waves', 'fractal', 'mandelbrot', 'cellular', 'quantum']:
        print(f"\nTesting {mode} visualization:")
        print(generator.visualize("audio.flac", mode, "bright_cyan", 1.5))

    # Test gradient color
    print("\nTesting gradient color:")
    print(generator.visualize("audio.flac", "fractal", "red-gradient-blue"))

    # Test pattern mixing
    print("\nTesting pattern mixing:")
    print(generator.visualize("audio.flac", "fractal+quantum", "rainbow"))